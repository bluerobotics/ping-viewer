{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ping Viewer Documentation","text":"<p>Ping Viewer is a graphical user interface for devices supporting the Ping protocol. The application allows you to connect, configure, view data, and record data from a Ping device.</p>"},{"location":"#supported-device-types","title":"Supported Device Types","text":""},{"location":"#single-direction-echosounders","title":"Single-Direction Echosounders","text":"<ul> <li>Requires the Ping1D message set</li> <li>Estimates distance to an object or surface, for obstacle avoidance or surface/terrain tracking</li> <li>Moving the device creates a waterfall profile of the covered obstacles/terrain</li> <li>Known examples include:<ul> <li>Blue Robotics Ping Sonar Altimeter and Echosounder<ul> <li>Open source firmware variant available for reference</li> </ul> </li> <li>Cerulean Sonar Sounder S500</li> </ul> </li> </ul>"},{"location":"#rotating-scanning-sonars","title":"Rotating Scanning Sonars","text":"<ul> <li>Requires the Ping360 message set</li> <li>Requesting different transducer angles builds up an image of objects in the space around the device</li> <li>Can compensate for vehicle heading, if mounted on a MAVLink-enabled vehicle</li> <li>Known examples include:<ul> <li>Blue Robotics Ping360 Scanning Imaging Sonar</li> </ul> </li> </ul>"},{"location":"#installing-and-running-the-application","title":"Installing and Running the Application","text":"<p>Follow the setup instructions for your operating system:</p> <ul> <li>Windows</li> <li>Mac</li> <li>Linux</li> </ul>"},{"location":"#windows","title":"Windows","text":"<p>Download this .zip file, open the download location in the File Explorer, and extract it. Open the application by double clicking the executable file (pingviewer.exe). Windows will ask you to trust the software; click More Info \u2192 Run Anyway.</p> <p></p>"},{"location":"#mac","title":"Mac","text":"<p>Download this .dmg file, and double click it to open. Drag the Ping Viewer application icon to your Applications folder. Open the application by double clicking the icon in your Applications folder.</p> <p></p> <p>If you get an 'unidentified developer' notification when you try to open the application, you may need to adjust your security preferences to allow the application to run. Visit System Preferences -&gt; Privacy and Security, scroll to the bottom, click 'Open Anyway', and enter your password when prompted.</p> <p></p> <p></p>"},{"location":"#linux","title":"Linux","text":"<p>Download this .AppImage file. Edit the permissions of the .AppImage to have executable permission with the command line: <code>chmod +x ping-viewer-linux.AppImage</code>. Open the AppImage by double clicking it, or execute it from the command line: <code>./ping-viewer-linux.AppImage</code>.</p> <p>Remember to run the commands in the same path where the Appimage file is.</p>"},{"location":"#connection-setup","title":"Connection Setup","text":"<p>To begin using the device, connect it to a USB - UART converter that operates on 5V like this Blue Robotics adapter. Then connect the converter to your computer's USB port. The Ping Viewer application should automatically detect your device and begin displaying data. If it does not, check the FAQ and Troubleshooting guide.</p> <p>Visit the Device Manager menu for more connection options.</p>"},{"location":"#main-application-interface","title":"Main Application Interface","text":""},{"location":"#ping1d","title":"Ping1D","text":"<p>When using a Ping1D device, the Ping Viewer window consists of four important components:</p> <ol> <li>Distance Readout</li> <li>Distance Axis</li> <li>Return Plot</li> <li>Waterfall</li> </ol> <p></p>"},{"location":"#distance-readout","title":"Distance Readout","text":"<p>The Distance Readout displays the distance to the target in the most recent measurement. This is the distance to the seafloor in depth sounding applications.</p> <p>The confidence measurement for the most recent sample is displayed below the distance in the Distance readout. The color of the Distance Readout reflects the current confidence measurement, where green = 100%, yellow = 50% and red = 0%: </p> <p>The size of the distance readout can be moved and adjusted.</p>"},{"location":"#distance-axis","title":"Distance Axis","text":"<p>The Distance Axis is labeled with bold numbers on the right-hand edge of the Waterfall. This axis represents the distance from the Ping device transducer. The axis runs vertically down the screen, with the face of the transducer (zero distance) located at the top of the window. The deeper/farther an object is from the transducer, the closer its return will appear to the bottom of the window. The Distance Axis scale automatically adjusts to display the current scanning range of the Ping device.</p> <p>There is an orange arrow on the Distance Axis indicating the distance to the target in the most recent measurement (this is the same as the Distance Readout).</p>"},{"location":"#return-plot","title":"Return Plot","text":"<p>The Return Plot displays the return strength vs distance of the most recent profile sample. The plot displays the measurement of only a single dependent variable (return strength), and is simply mirrored for ease of viewing. Stronger returns appear as wider traces.</p> <p>Note You may observe a very strong return at the top of the screen (at zero distance, essentially touching the device); this return is from the Ping device itself. When the Ping device emits the acoustic pulse, the device is still vibrating or 'ringing' like a bell when it begins measuring the return signal. This residual energy in the vibrations of the Ping device body is picked up as a return signal until it decays away.</p>"},{"location":"#waterfall","title":"Waterfall","text":"<p>The Waterfall is a three dimensional plot that occupies the main portion of the application window. The Waterfall plots consecutive profile samples (distance running vertically and color indicating signal strength). The horizontal axis is time; new data is displayed on the right edge of the Waterfall as older data moves to the left.</p> <p>The color scheme (gradient) of the Waterfall can be customized.</p>"},{"location":"#ping360","title":"Ping360","text":"<p>For the Ping360, there is no distance readout, the waterfall is wrapped around into a circular (polar) plot showing the scan data at each angle, and the distance axis is along the right-hand edge of the sector scan. The return plot is the same as for the Ping1D, and shows the signal return strength over the full range of the latest ping.</p> <p>The sector angle and range can be set to match your operating requirements, and there are options for heading integration and head down mode to adapt the display to your ROV and Ping360's orientation.</p>"},{"location":"#application-and-device-settings","title":"Application and Device Settings","text":"<p>See here for instructions to switch between meters and feet for the application display.</p> <p>To adjust the update rate and other Ping device settings, visit the relevant page in the 'Device Settings' section.</p>"},{"location":"_footer/","title":"footer","text":"<p>For questions, technical support, or to share your project, visit our active community forum!</p> <p>Find the Ping Sonar and other great marine robotics components in the Blue Robotics Store.</p> <p>Code released under the GPLv3 License. Documentation released under the CC-NC-SA 4.0 License.</p>"},{"location":"application-information/","title":"Application Information","text":""},{"location":"application-information/#menu-items","title":"Menu Items","text":"<ol> <li>Application software information</li> <li>Device model and firmware information</li> <li>Header buttons</li> <li>Application log</li> <li>Log categories</li> </ol>"},{"location":"application-information/#application-software-information","title":"Application software information","text":"<p>This area shows information about the Ping Viewer application software version.</p>"},{"location":"application-information/#device-model-and-firmware-information","title":"Device model and firmware information","text":"<p>This area shows information about the connected device.</p>"},{"location":"application-information/#header-buttons","title":"Header buttons","text":"<ul> <li> Scroll lock for log window</li> <li> Blue Robotics Forum</li> <li> Bug reports and feature requests</li> <li> Reset application settings</li> </ul>"},{"location":"application-information/#application-log","title":"Application log","text":"<p>The application log area displays log messages emitted by the application. The log messages displayed in this window are filtered according to the log category selection.</p>"},{"location":"application-information/#log-categories","title":"Log categories","text":"<p>Here, you can select which log categories to display in the application log area. The log categories each coorespond to a source file or class. For example, the <code>ping.notificationmanager</code> category cooresponds to the notificationmanager.cpp class. Enabling the log category will make the log events for the cooresponding source files visible in the debug log window. The log file that is written to disk always contains all log messages, the log category selection in the UI does not affect the log file.</p>"},{"location":"binary-structure/","title":"Binary log file structure","text":"<p>The log file that Ping Viewer provides has a header description structure that allows program to identify different types of information, the header structure is defined as the following:</p> <ul> <li>Header (String)</li> <li>Log structure version (int32)</li> <li>Information about the program that have generated the log</li> <li>Ping Viewer commit hash (String)</li> <li>Ping Viewer build date (String)</li> <li>Ping Viewer release tag (String)</li> <li>Operating System name (String)</li> <li>Operating System version (String)</li> <li>Sensor information</li> <li>Sensor type (int32)</li> <li>Sensor model (int32)</li> </ul> <p>Note: The binary file structure is done in big-endian.</p> <p>Arrays (Strings) are defined with the following structure:   - Array size (uint32)   - Array data (byte_array[])</p> <p>The source code that defines this structure can be found in Ping Viewer source code LogSensorStruct file.</p> <p>After the header block, the messages are organized in the following format: [Timestamp string][Byte array from the serial buffer]</p> <p>Where the timestamp string follows the format: <code>hh:mm:ss.zzz</code>.</p> <p>Note that the byte array part may not contain a full valid message, it just contains the data available on the serial buffer during the sample time of the timestamp.</p>"},{"location":"binary-structure/#python-example","title":"Python example","text":"<p>You can check this minimal Python example (needs Python 3.7+).</p> <p>It's necessary to install <code>bluerobotics-ping</code> python package before running it.</p> <p>It outputs the Header content, and after an user input, it decodes some specific messages from the file. E.g:</p> <pre><code>Header:\n    String: PingViewer sensor log file\n    Version: 1\n    PingViewerBuildInfo:\n        hash: b0461486\n        date: 2020-01-03T14:31:14-03:00\n        tag: development\n        os:\n            name: Arch Linux\n            version: unknown\n    Sensor:\n        Family: 1\n        Type: 2\n\nPress Enter to continue and decode received messages...\n</code></pre>"},{"location":"build-instructions/","title":"Build instructions","text":"<p>The following topic will explain how to get Ping-Viewer source code and how to build it.</p>"},{"location":"build-instructions/#daily-builds","title":"Daily Builds","text":"<p>If you just want to test (and not debug) a recent build of Ping-Viewer you can use the Continuous Build. Versions are provided for all platforms [Windows, Linux and Mac].</p>"},{"location":"build-instructions/#source-code","title":"Source Code","text":"<p>Source code for Ping-Viewer is kept on GitHub here: https://github.com/bluerobotics/ping-viewer, and it's licensed under GPLv3.</p> <p>To get the source files:</p> <ol> <li>Clone the repo (or your fork) including submodules and go inside folder:<ul> <li><code>git clone https://github.com/bluerobotics/ping-viewer --recursive &amp;&amp; cd ping-viewer</code></li> </ul> </li> <li>Update submodules (required each time you pull new source code):<ul> <li><code>git submodule update --init --recursive</code></li> </ul> </li> </ol> <p>Note: Github source-code zip files cannot be used because these do not contain the appropriate submodule source code. You must use git!</p>"},{"location":"build-instructions/#build-ping-viewer","title":"Build Ping-Viewer","text":""},{"location":"build-instructions/#native-builds","title":"Native Builds","text":"<p>Ping-Viewer builds are supported for Windows, Linux and macOS. This is possible with the Qt toolkit as its cross-platform support library.</p> <ul> <li>macOS: v10.14 or higher</li> <li>Linux: 64 bit, gcc-8 or clang-7 compiler versions or higher</li> <li>Windows: 10 or higher, Visual Studio 2017 compiler (64 bit)</li> <li>Qt version: 5.15 (only)</li> </ul> <p>Tip: For more information see: Qt 5 supported platform list.</p>"},{"location":"build-instructions/#install-visual-studio-2017-windows-only","title":"Install Visual Studio 2017 (Windows Only)","text":"<p>The Windows compiler can be found here: Visual Studio 2017 compiler (64 bit).</p> <p>When installing, you must minimally select all Visual C++ components.</p>"},{"location":"build-instructions/#install-qt","title":"Install Qt","text":"<ol> <li>Download and run the Qt Online Installer.</li> <li>In the installer Select Components dialog choose: 5.15.</li> </ol> <p>Then install just the following components:    - Qt binary version:      - Windows: MSVC 2017 64-bit      - MacOS: macOS Clang 64-bit      - Linux: Desktop gcc 64-bit    - Everything else may be necessary except Android tools.</p> <ol> <li>Install Additional Packages (Platform Specific)</li> <li>Windows: USB Driver.</li> </ol>"},{"location":"build-instructions/#building-using-qt-creator","title":"Building using Qt Creator","text":"<ol> <li>Launch Qt Creator and open the CMakeLists.txt project.</li> <li>Select the appropriate kit for your needs:</li> <li>macOS: Desktop Qt 5 Clang 64 bit</li> <li>Linux: Desktop Qt 5.15 GCC 64 bit</li> <li>Windows: Desktop Qt 5.15 MSVC2017 64 bit</li> <li>Build and run with the Green Play icon.</li> </ol>"},{"location":"build-instructions/#building-with-terminal","title":"Building with terminal","text":"<p>Since Ping-Viewer v2.2.0, the project now uses CMake to simplify the build process. For more information about CMake with Qt based projects, check the Qt CMake manual;</p> <ol> <li>Use CMake to configure the project<ul> <li><code>cmake -B build -DCMAKE_BUILD_TYPE=Debug</code> <p>Note: CMake may fail to find the necessary <code>*.cmake</code> files for configuration, for that, you can set the <code>Qt5_DIR</code> variable with the path for the cmake/Qt5 folder. Like: <code>cmake -B build -DCMAKE_BUILD_TYPE=Debug -DQt5_DIR=$(brew --prefix qt5)/lib/cmake/Qt5</code></p> </li> </ul> </li> <li>Use CMake again to build it<ul> <li><code>cmake --build build --parallel --config Debug</code></li> </ul> </li> <li>Go inside build folder<ul> <li><code>cd build</code></li> </ul> </li> <li>And after that you'll be able to run the project<ul> <li><code>./pingviewer</code> <p>Note: macOS uses a different path for application binaries, the binary will be available under: <code>./pingviewer.app/Contents/MacOS/pingviewer</code></p> </li> </ul> </li> </ol>"},{"location":"build-instructions/#qmake-build","title":"QMake build","text":"<p>For Ping-Viewer versions under v2.2.0.</p> <ol> <li>Go outside the cloned folder of Ping-Viewer</li> <li>Create the build folder<ul> <li><code>mkdir ping-viewer-build</code></li> </ul> </li> <li>Go inside build folder<ul> <li><code>cd ping-viewer-build</code></li> </ul> </li> <li>Run qmake command<ul> <li><code>qmake ../ping-viewer</code></li> </ul> </li> <li>And build it<ul> <li><code>make</code></li> </ul> </li> <li>And after that you'll be able to run the project<ul> <li><code>./pingviewer</code></li> </ul> </li> </ol> <p>Tip: You can use <code>make -jN</code> where N is the number of threads in your computer to improve the compiling speed.</p>"},{"location":"build-instructions/#build-documentation","title":"Build documentation","text":"<ol> <li>Follow the Source Code guide.</li> <li>Checkout to the documentation branch:<ul> <li><code>git checkout docs</code></li> </ul> </li> <li>Create and activate a virtual environment:<ul> <li><code>python -m venv .venv</code></li> <li><code>source .venv/bin/activate</code></li> </ul> </li> <li>Install necessary tools:<ul> <li><code>pip install mkdocs-material</code></li> </ul> </li> <li>Build the documentation:<ul> <li><code>mkdocs build</code></li> </ul> </li> <li>Serve the documentation to view it locally:<ul> <li><code>mkdocs serve</code></li> <li>Copy the serving URL (e.g. <code>http://127.0.0.1:8000</code>) to your browser to view</li> </ul> </li> <li>Stop serving the docs site:<ul> <li>Press <code>CTRL+C</code> while the terminal is in focus</li> </ul> </li> <li>Deactivate the virtual environment:<ul> <li><code>deactivate</code></li> </ul> </li> </ol>"},{"location":"device-manager/","title":"Device Manager","text":"<p>PingViewer automatically scans for available devices on serial ports (COM) and UDP connections. If a Ping device is detected, the available connection is shown and the user will be able to choose between all available devices in Device Manager.</p> <p>PingViewer attempts to connect to UDP ports 9090 (Ping1D devices) and 9092 (Ping360 devices) on the host at IP address <code>192.168.2.2</code>. This is the default IP address of the onboard computer that runs on the BlueROV2. The onboard computer automatically configures a communication bridge on these ports to a connected sensor.</p>"},{"location":"device-manager/#device-manager","title":"Device Manager","text":"<ol> <li>Shows an animation and the name of the available sensor.</li> <li>Describes the kind of the available connection.</li> <li>Shows the availability of the connection. Red: The connection is not available/reliable. Green: The sensor is connected and available for connection.</li> <li>Describes the connection type and the connection configuration.</li> <li>Allows the user to go to Manual Connection.</li> <li>Cancel and exit Device Manager.</li> <li>Opens Ping360 Ethernet Configuration painel.</li> </ol>"},{"location":"device-manager/#manual-connection","title":"Manual Connection","text":"<ol> <li>Displays all devices compatible.</li> <li>Shows available connection types.</li> <li>Lists all available serial ports.</li> <li>Displays the valid baud rates for the selected device. <p>Note: If the device uses Automatic Baud Rate detection, the baud rate list will not appear.</p> </li> <li>Connects with the configured settings.</li> <li>Goes back to Device Manager menu.</li> <li>Cancel and exit Manual Connection.</li> </ol>"},{"location":"device-manager/#connection-types","title":"Connection Types","text":"<ul> <li>Serial: Select the serial port (eg. <code>COM1</code> or <code>ttyUSB0</code>) and baudrate, that will be updated by the possible baud rates for the sensor.</li> <li>UDP: Select the host UDP server IP address and port.</li> </ul> <p>Note: To connect the application to a Ping device on a remote host (eg. a Raspberry Pi) you can use the pingproxy program in the bluerobotics-ping python package:</p> <p><code>pip install --user bluerobotics-ping</code></p> <p><code>python -m brping/pingproxy --device &lt;device&gt;</code></p> <p><code>&lt;device&gt;</code> is the serial port where the Ping device is connected (eg. <code>/dev/ttyUSB0</code>).</p>"},{"location":"device-manager/#ping360-ethernet-configuration","title":"Ping360 Ethernet Configuration","text":"<p>Allows ethernet mode type as DHCP Client or static IP. When using static IP, be sure to set an IP address that exists under your configured subnet.</p> <p>This configuration is only for users that have a custom network environment, such option is not supported fully.</p>"},{"location":"device-settings-ping1d/","title":"Ping1D","text":""},{"location":"device-settings-ping1d/#menu-items","title":"Menu Items","text":"<ul> <li>Emit Ping: Request a single profile sample from the device, and stop continuous transmission of profile data (if active).</li> <li>Ping Rate Slider: Enable continuous transmission of profile data, and set the maximum update rate (the actual update rate may be slower).</li> <li>Speed of Sound: The speed of sound to be used for distance calculations. At 20\u2103 this should be roughly 1520 m/s in salt water, 1480 m/s in fresh water, and 343 m/s in air (for testing!). See this calculator for more accurate speeds in water at different depths, temperatures, and salinity levels.</li> <li>Ping Enabled: Enable the acoustic output of the Ping device. When set to disabled, the Ping will not emit energy from the transducer. When set to enabled, energy may be emitted for background operations, even when there is no data being transmitted.</li> <li>Reset Settings: Reset sensor to default configuration.</li> </ul>"},{"location":"device-settings-ping1d/#advanced-settings","title":"Advanced Settings","text":"<p>Click on the arrow in the Device Settings menu to access these advanced settings</p> <ul> <li>Auto Gain: Enable automatic gain and range adjustments (ENABLED is the recommended default settings).</li> <li>Gain Selection: Manual gain control (automatic mode must be disabled). Adjust the sensitivity of the device; larger numbers indicate greater sensitivity.</li> <li>Scan Range: Manual scan range selection (automatic mode must be disabled). Manually select the scan range for data output and target tracking. There are two parameters to adjust the scan range:</li> <li>Scan Start: The distance away from the Ping device transducer to begin the scan</li> <li>Scan Length: The total distance to be scanned (the distance from Scan Start to end the scan)</li> </ul>"},{"location":"device-settings-ping360/","title":"Ping360","text":""},{"location":"device-settings-ping360/#menu-items","title":"Menu Items","text":"<ul> <li>Range: adjust the distance from the sonar to scan signals. Smaller ranges will scan faster as the receiver does not have to wait as long to receive a response. Changes to this setting will automatically adjust the transmit duration (advanced setting) for best performance in most applications.</li> <li>Receiver Gain: Adjusts receiver sensitivity, choices are low, medium and high. Higher gain is more likely to detect smaller/further targets, but is also more likely to saturate the signal for closer/larger targets. Where the signal saturates it clips to the maximum intensity, so there is less detail for determining precise distances, or differentiating between multiple strong responses. Saturation is mostly problematic for mapping with/analysis of the scan data, and is less of an issue for navigation.</li> <li>Sector Angle: Choose full 360 scan, or select a smaller area to scan directly in front of the sonar. Smaller sector angles take less time to scan. For non-full sectors the scan angle bounces back and forth within the sector boundaries.</li> <li>Reset Settings: Reset the settings in this panel to their default configuration.</li> </ul>"},{"location":"device-settings-ping360/#advanced-settings","title":"Advanced Settings","text":"<p>Click the arrow on the Device Settings menu to access these advanced settings</p> <ul> <li>Transmit Duration: The length of time to transmit for in each ping. Longer durations send more sound energy, so are more likely to get a response, but come at the cost of range precision for the responses. Updates to the range setting automatically update this to maximise response strength for the current range resolution. In enclosed or otherwise acoustically noisy environments it can help to reduce this and the receiver gain, and in open water with far away and/or small targets it can help to increase them.</li> <li>Transmit Frequency: Changes the frequency of the emitted pulse. Lower frequencies are less absorbed by water, but the Ping360 transducer is tuned to 750kHz and less sensitive to other frequencies. Practically recommended to stay within 650-850kHz. Can make minor changes to account for the doppler effect if consistently moving quickly (e.g. if moving at 1.5m/s (BlueROV2 max forward speed) reduce by 1-3kHz to optimise receiver sensitivity to objects being approached). May be useful for reducing interference to other nearby sensors with a similar acoustic range sensitivity.</li> <li>Speed of Sound: The speed of sound to be used for distance calculations. At 20\u2103 this should be roughly 1520 m/s in salt water, 1480 m/s in fresh water (It's not possible to use Ping360 in air!). See this calculator for more accurate speeds in water at different depths, temperatures, and salinity levels.</li> <li>Angular Resolution: Changes the step between each sample. Enables scanning a sector faster at the expense of a lower angular resolution.</li> </ul>"},{"location":"display-settings/","title":"Display Settings","text":""},{"location":"display-settings/#menu-items","title":"Menu Items","text":"<ul> <li> <p>Units: Select the units (Metric [meters] or Imperial [feets]) for the application to display</p> </li> <li> <p>Theme: Select the application menu theme (Light or Dark)</p> </li> <li> <p>Enable Always-On-Top mode: The application will be over (in front of) all other windows.</p> </li> <li> <p>Opacity: Select the application opacity. Used to partially view content (e.g. video stream) behind the application window.</p> </li> <li> <p>Enable Replay Menu: Enable the Replay Menu</p> </li> <li> <p>Enable Real-Time Replay: Shows playback as it was recorded (ie what you would see from a screen recording when the data was captured). Sets profile messages to display based on recorded timestamps, instead of using a constant period/update rate.</p> </li> <li> <p>Head Down (Ping360 only): Flip the polar scan so the display is correct for a Ping360 that is positioned upside down (scanning head at the bottom).</p> </li> <li> <p>Flip A-Scan: Flip between furthers/closest ping data at the top of the Return Plot.</p> </li> <li> <p>Smooth Data: Filter the Waterfall data to smooth noise and fluctuations.</p> </li> <li> <p>Antialiasing: Enable antialiasing in the Waterfall display rendering</p> </li> <li> <p>A-Scan: Enable a display of the signal intensity of the latest ping (Return Plot).</p> </li> <li> <p>Plot Theme: Select the color swath/gradient to use for the Waterfall display. Custom gradients can be created according to the custom gradients section.</p> </li> <li> <p>Heading Integration (Ping360 only): Integrate with ROV compass reading to allow sonar display to account for ROV rotations.</p> </li> <li> <p>Debug Mode: Enable Debug information and settings</p> </li> </ul>"},{"location":"display-settings/#custom-gradients","title":"Custom Gradients","text":"<p>The user can create his own gradients for the waterfall, for this, it's necessary to create a file that follow some rules inside Waterfall_Gradients folder.</p> <ol> <li>Filenames need to have .txt extension.</li> <li>Filenames will be used as gradient name.</li> <li>Filenames with underscores will be replaced with spaces.</li> <li>Lines that do not start with # will not be processed.</li> <li> <p>Color values need to follow:</p> <ol> <li><code>#RGB</code> (each of R, G, and B is a single hex digit)</li> <li><code>#RRGGBB</code></li> <li><code>#AARRGGBB</code></li> <li><code>#RRRGGGBBB</code></li> <li><code>#RRRRGGGGBBBB</code></li> </ol> <p>There is a very good tool to help with gradient colours here.</p> </li> <li> <p>First value will represent 0.0</p> </li> <li>The last value will represent 1.0</li> <li>The value of any other color will be <code>1.0*((color position) - 1)/(number of colors)</code></li> </ol> <p>This is an example of gradient file:</p> <pre><code>; Put this example in a file called `Gradient_test.txt` in **Waterfall_Gradients**.\n#7f000000\n#ffffff\n#ff0000\n</code></pre> <p>Where <code>#7f000000</code> is black with 50% transparency (low power signal - 0.0), <code>#ffffff</code> (average power signal - 0.5) is white and <code>#ff0000</code> is red (max power signal - 1.0).</p>"},{"location":"faq-and-troubleshooting/","title":"FAQ and Troubleshooting","text":""},{"location":"faq-and-troubleshooting/#faq","title":"FAQ","text":""},{"location":"faq-and-troubleshooting/#system-requirements","title":"System Requirements","text":"<p>Ping Viewer should run on any modern computer.</p> <ul> <li>Mac: OSX 10.12 or later</li> <li>Windows: Windows 10</li> <li>Linux: --</li> </ul>"},{"location":"faq-and-troubleshooting/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq-and-troubleshooting/#no-connection-to-the-device","title":"No Connection to the Device","text":"<ul> <li>If using a UDP connection via the Blue Robotics companion computer, power on the ping device(s) before or at the same time as the companion computer, so they can be detected correctly on companion startup</li> <li>If connecting directly to a computer with a serial connection, ensure QGroundControl is closed, or that 'SiK Radio' is deselected from the 'AutoConnect to the following devices' section of Application Settings/General. It's generally recommended to unselect the AutoConnect options for any device not actually being used. </li> <li>Reset the ping-viewer settings by clicking the gear icon in the application information header</li> <li>Ensure that your usb cable is in good condition and supports data transfer. Try to use another usb cable or a cable known to work with another device like a phone.</li> <li>Ensure that the usb-uart bridge is working with your computer. The list of communication ports should change when you plug/unplug your device.</li> <li>Windows: check the COM port list in the windows device manager</li> <li>Mac/Linux: check the serial devices list when you enter the command <code>ls /dev/tty*</code> in the terminal</li> <li>Ensure that the 5V, ground, RX and TX lines are connected correctly to the device. Try switching the RX and TX lines.</li> <li> <p>Ensure that you have the necessary permissions to access the usb device. Add your user to the correct group in order to gain access to the usb device.</p> </li> <li> <p>Ubuntu: <code>sudo usermod -a -G dialout $USER</code></p> </li> <li> <p>Archlinux: <code>sudo usermod -a -G uucp $USER</code></p> </li> <li> <p>Ensure that you have installed the necessary drivers.</p> </li> <li> <p>Windows</p> <p>If no serial device appears in Ping Viewer while connected to the computer, download and install Windows FTDI VCP Driver Executable.</p> <ol> <li> <p>Allow any question related to the software publisher or disk modifications. </p> </li> <li> <p>Follow the installation procedure.</p> </li> </ol> <p></p> <ol> <li>After finishing the installation, restart you computer and run Ping Viewer, the serial port should appear.</li> </ol> <p></p> </li> </ul>"},{"location":"firmware-update/","title":"Firmware Update","text":"<p>The Firmware Update menu allows you to update the programming on a Blue Robotics Ping Sonar or Ping360 device.</p>"},{"location":"firmware-update/#automatic-firmware-update","title":"Automatic Firmware Update","text":"<p>Steps to flash the device:</p> <ol> <li>Connect to the device directly, with a serial connection</li> <li>Open the Firmware Update menu</li> <li>Choose 'Automatic Update', and the latest available firmware version*</li> <li>Click FIRMWARE UPDATE to start the process.</li> <li>The update progress is indicated by the progress bar located at the bottom of the menu. When the update completes, the progress bar will resume its idle animation, and the Ping device will resume data transmission.</li> </ol> <p>Wait for the update process to complete before unplugging the device!</p> <p>*Ping Sonar firmware versions before v3.28 only communicate at a fixed baudrate, so require specifying the desired rate for your application (115kbps or 9600bps). Newer firmwares determine the baudrate automatically.</p> <p></p>"},{"location":"firmware-update/#manual-firmware-update","title":"Manual Firmware Update","text":"<p>Steps to flash the device:</p> <ol> <li>Connect to the device directly, with a serial connection</li> <li>Open the Firmware Update menu</li> <li>Choose 'Manual Update'</li> <li>Get your desired firmware<ul> <li>from the official firmware repository<ol> <li>Open the relevant folder<ul> <li>Second generation (full black) Ping Sonar devices use the <code>ping2</code> folder</li> <li>Original Ping Sonar devices (with a blue ring around the transducer) use the <code>ping1d</code> folder</li> <li>Ping360 devices use the <code>ping360</code> folder</li> </ul> </li> <li>Right click 'Raw' and click 'Save Link As...' to download and save the firmware hex file (<code>.hex</code>) </li> <li>If the file format is coming up as 'Text Document (.txt)' or similar, change it to 'HEX File (.hex)' if possible, or select 'All files' and ensure the file extension is <code>.hex</code>, not <code>.hex.txt</code></li> </ol> </li> <li>from the open source sonar repository<ul> <li>Ping Sonar devices only</li> <li>Pre-builds are available in the release assets or a custom build of the open source sonar repository</li> <li>Custom builds are also possible</li> </ul> </li> </ul> </li> <li>In Ping-Viewer, click <code>Browse</code> to select the firmware hex file that you saved</li> <li>Click FIRMWARE UPDATE to start the process.</li> <li>The update progress is indicated by the progress bar located at the bottom of the menu. When the update completes, the progress bar will resume its idle animation, and the Ping device will resume data transmission.</li> </ol> <p>Wait for the update process to complete before unplugging the device!</p> <p></p>"},{"location":"firmware-update/#ping-sonar-device-recovery","title":"Ping Sonar Device Recovery","text":"<p>If a Ping Sonar is not working after flashing new firmware, or if some problem was encountered during installation, a recovery process may be necessary.</p> <p>The device must be opened to restore the firmware. We only want to open the device if it's absolutely necessary, so to make sure, please reset ping-viewer settings, and connect the device to the computer again. If ping-viewer detects the device automatically, there is no problem! If not, then we can proceed to recover the device.</p> <p>To open a first generation Ping Sonar, hold it firmly, and turn the blue ring in counterclockwise direction:</p> <p></p> <p>To open a second generation Ping Sonar, pull out the plastic locking cord, then carefully separate the top from the case:</p> <p></p> <p>After the device is opened, turn it on and look for a blinking led on the circuit board inside of the device. If you see a blinking led, the device should be good and the firmware is running fine, you may close the device and double check the troubleshooting instructions.</p> <p>If the led is blinking:</p> <ul> <li>No recovery is necessary, the firmware is working fine</li> <li>Try with a different serial-USB adapter</li> <li>Check if the adapter is providing 5V and all connections are correct without short circuits</li> <li>Contact Blue Robotics support email</li> </ul> <p>If the led is not blinking:</p> <ul> <li>Open the folder where the ping-viewer executable binary is located</li> <li>Copy the folder path (we will use <code>/folder/path</code> in this example)</li> <li>Open your OS terminal. (Powershell on Windows, Terminal on Mac, or what you prefer on Linux :) )</li> <li>type: <code>cd \"/folder/path\"</code><ul> <li>Mac requires going into the <code>.app</code>, e.g. <code>cd /Applications/pingviewer.app</code></li> </ul> </li> <li>After that you should download the last firmware available:<ul> <li>On Windows:<ol> <li><code>set DEVICE=ping2</code> (for the second generation Ping Sonar) or <code>set DEVICE=ping1d</code> (for the original Ping Sonar)</li> <li><code>set FIRMWARE=Ping2-V1.0.0_auto.hex</code> or <code>set FIRMWARE=Ping-V3.29_auto.hex</code></li> <li><code>Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/bluerobotics/ping-firmware/master/%DEVICE%/%FIRMWARE%\" -OutFile \"$PWD/%FIRMWARE%\"</code></li> </ol> </li> <li>On Linux:<ol> <li><code>DEVICE=ping2</code> (for the second generation Ping Sonar) or <code>DEVICE=ping1d</code> (for the original Ping Sonar)</li> <li><code>FIRMWARE=Ping2-V1.0.0_auto.hex</code> or <code>FIRMWARE=Ping-V3.29_auto.hex</code></li> <li><code>wget \"https://raw.githubusercontent.com/bluerobotics/ping-firmware/master/$DEVICE/$FIRMWARE\"</code></li> </ol> </li> <li>On Mac:<ol> <li><code>DEVICE=ping2</code> (for the second generation Ping Sonar) or <code>DEVICE=ping1d</code> (for the original Ping Sonar)</li> <li><code>FIRMWARE=Ping2-V1.0.0_auto.hex</code> or <code>FIRMWARE=Ping-V3.29_auto.hex</code></li> <li><code>curl -O \"https://raw.githubusercontent.com/bluerobotics/ping-firmware/master/$DEVICE/$FIRMWARE\"</code></li> </ol> </li> </ul> </li> <li>With the device open, you should see a BOOT button in the main board. Power down the device, press and hold this button down, then power the device and let go of the button</li> <li>You should check the port of the device with Windows Device Manager, <code>dmesg</code> on Linux, or <code>ls /dev/tty.usbserial*</code> on Mac.</li> </ul> <p></p> <ul> <li>After finding the port (<code>COMx</code> on Windows, <code>/dev/ttyUSB*</code> on Linux, <code>/dev/tty.usbserial*</code> on Mac) you can start the flash procedure.</li> <li>In the same terminal type:<ul> <li>On Windows <code>.\\stm32flash.exe -v -g 0x0 -b 115200 -w .\\%FIRMWARE% COM4</code><ul> <li>Where <code>COM4</code> is my serial port (yours may be different)</li> </ul> </li> <li>On Linux <code>./stm32flash -v -g 0x0 -b 115200 -w $FIRMWARE /dev/ttyUSB0</code><ul> <li>Where <code>/dev/ttyUSB0</code> is my serial port (yours may be different)</li> </ul> </li> <li>On Mac <code>./stm32flash -v -g 0x0 -b 115200 -w $FIRMWARE /dev/tty.usbserial-D200BEDP</code><ul> <li>Where <code>/dev/tty.usbserial-D200BEDP</code> is my serial port (yours may be different)</li> </ul> </li> </ul> </li> </ul> <p>You should see the following output:</p> <pre><code>stm32flash 0.5\n\nhttps://stm32flash.sourceforge.net/\n\nUsing Parser : Intel HEX\nInterface serial_posix: 115200 8E1\nVersion      : 0x31\nOption 1     : 0x00\nOption 2     : 0x00\nDevice ID    : 0x0446 (STM32F302xD(E)/F303xD(E)/F398xx)\n- RAM        : 64KiB  (6144b reserved by bootloader)\n- Flash      : 512KiB (size first sector: 2x2048)\n- Option RAM : 16b\n- System RAM : 8KiB\nWrite to memory\nErasing memory\nWrote and verified address 0x080202c8 (100.00%) Done.\n\nStarting execution at address 0x08000000... done.\n</code></pre> <p>Keep in mind that the writing percentage should be 100%, if not, check your connections.</p> <p>If the instructions are not clear or sound a bit complicated, please wait a bit more for us to create a Ping-Viewer version that allows you to recover devices.</p>"},{"location":"hotkeys-and-shortcuts/","title":"Keyboard shortcuts","text":"<ul> <li>R: Reset waterfall drawing.</li> <li>S: Grab a screenshot of the application window.</li> <li>W: Grab a screenshot of the waterfall.</li> </ul>"},{"location":"hotkeys-and-shortcuts/#mouse-shortcuts","title":"Mouse shortcuts","text":"<ul> <li>Click and drag the Distance Readout to move it.</li> <li>Hover the mouse over the Distance Readout and use the mouse scroll to adjust the size of the Depth Readout</li> <li>Click and drag the left edge of the Return Plot to adjust its width.</li> </ul>"},{"location":"libraries-and-tools/","title":"Libraries and Tools","text":""},{"location":"libraries-and-tools/#libraries-and-tools","title":"Libraries and Tools","text":"<p>Ping-Viewer is an Open Source project, and is based on Open Source libraries and tools. This page provides some references about the technology that makes Ping-Viewer possible.</p>"},{"location":"libraries-and-tools/#libraries","title":"Libraries","text":"<p>Some libraries are used to help Ping-Viewer to perform a better job:</p> <ul> <li>ping-cpp - Generated C++ library for ping-protocol.</li> <li>maddy - C++ Markdown to HTML library.</li> </ul>"},{"location":"libraries-and-tools/#tools","title":"Tools","text":"<p>There is some utility software that helps Ping-Viewer to provide more functionalities for the user:</p> <ul> <li>stm32flash<ul> <li>Open Source cross platform flash program for the STM32 ARM microcontrollers using the built-in ST serial bootloader over UART or I2C.</li> </ul> </li> </ul>"},{"location":"logging-and-user-files/","title":"User Files","text":""},{"location":"logging-and-user-files/#user-files","title":"User Files","text":"<p>This section describes the user-accessible files used by the Ping Viewer application.</p> <p>All files are timestamped with the format <code>YMD-hmsl</code>, where Year(Y), Month(M), Day(D), Hour(h), Minute(m), second(s) and milisecond(l).</p>"},{"location":"logging-and-user-files/#folder-structure","title":"Folder Structure","text":"<p>Ping Viewer will create a folder called <code>PingViewer</code> in your user documents folder:</p> <ul> <li>Windows: <code>~/My Documents/PingViewer</code></li> <li>Mac: <code>~/Documents/PingViewer</code></li> <li>Linux: <code>~/Documents/PingViewer</code></li> </ul> <p>The Ping Viewer application uses these folders inside of the <code>PingViewer</code> folder:</p> <ul> <li>Gui_Log</li> <li>Sensor_Log</li> <li>Pictures</li> <li>Waterfall_Gradients</li> </ul>"},{"location":"logging-and-user-files/#gui-logs","title":"GUI Logs","text":"<p>The GUI log files (.txt) contain debug log output from the Ping Viewer application process. All log categories are captured in these logs.</p>"},{"location":"logging-and-user-files/#sensor-logs","title":"Sensor Logs","text":"<p>The sensor log files (.bin) contain all of the raw binary communications received from the device. These binary communications are in Ping Protocol format. The logs can be replayed by Ping Viewer application. To know more about the binary structure, please check binary log file structure.</p>"},{"location":"logging-and-user-files/#pictures","title":"Pictures","text":"<p>Screenshots (.png) are stored in this folder.</p>"},{"location":"logging-and-user-files/#waterfall-gradients","title":"Waterfall Gradients","text":"<p>Custom gradients (.txt) should be placed in this folder.</p>"},{"location":"logging-and-user-files/#settings","title":"Settings","text":"<p>Ping Viewer uses the native settings environment of each operating system, you can reset the settings with the reset settings button or by manually removing the settings in your computer, they are located under:</p> <ul> <li>Mac: Under the file <code>~/Library/Preferences/com.blue-robotics-inc.Ping\\ Viewer.plist</code></li> <li>Linux: Under the file <code>\"~/.config/Blue Robotics Inc/Ping Viewer.conf\"</code></li> <li>Windows: Open the Registry Editor and follow the path: <code>Computer\\HKEY_CURRENT_USER\\Software\\Blue Robotics Inc.\\Ping Viewer</code></li> </ul> <p></p>"},{"location":"mavlink-integration/","title":"MAVLink Integration","text":""},{"location":"mavlink-integration/#mavlink-integration","title":"MAVLink Integration","text":"<p>Vehicles that run ArduPilot (E.g: ArduSub and ArduRover) communicate using a protocol called MAVLink, Some supported Ping Viewer sensors can communicate with these vehicles to fetch the necessary information to improve the visualization experience and provide extra information about the environment and perspective.</p>"},{"location":"mavlink-integration/#mavlink-source","title":"MAVLink Source","text":"<p>Ping Viewer by default expects to communicate with a vehicle that contains a companion computer, or any other component that can provide MAVLink messages via an UDP server with the IP address 192.168.2.2 and port 14660.</p> <p>Note: The UDP server IP address and port can't be configured with the actual version of Ping-Viewer.</p>"},{"location":"mavlink-integration/#supported-devices-and-visualization-settings","title":"Supported Devices and Visualization Settings","text":"<p>Right now Ping360 is the only supported device that integrates with MAVLink, the visualizer updates the heading based on vehicle orientation to improve pilot perspective about the environment.</p> <p>Your browser does not support the video element.</p>"},{"location":"notifications-and-updates/","title":"Notificiations and Updates","text":""},{"location":"notifications-and-updates/#notifications","title":"Notifications","text":"<p>When notifications are available, you can display them by clicking on the bell icon in the bottom right hand corner of the Ping Viewer application window. To dismiss a single notification, click the  icon on the notification. To dismiss all notifications, click the  icon at the bottom of the notification list.</p>"},{"location":"notifications-and-updates/#application-updates","title":"Application Updates","text":"<p>When the Ping Viewer application opens, it checks for application updates (requires an internet connection). If there is an update available, a notification will be displayed. To update the application, follow the installation instructions.</p>"},{"location":"notifications-and-updates/#firmware-updates","title":"Firmware Updates","text":"<p>After a device is connected, the Ping Viewer application checks if there is a newer firmware version available (requires an internet connection). If there is an update available, a notification will be displayed. To update the firmware, right click on the webpage and click 'save as'. Visit the Firmware Update menu and select the firmware file that you saved to update the device.</p>"},{"location":"replay-data/","title":"Replay Data","text":"<p>The data from the Ping device is saved to a log file. The data in these log files can be played back by the Ping Viewer application, and the result is that the data is displayed just the same as it was originally captured.</p>"},{"location":"replay-data/#enable-replay-menu","title":"Enable Replay Menu","text":"<p>The replay menu is hidden and disabled by default. Visit the Display Settings to enable the Replay Menu.</p>"},{"location":"replay-data/#menu-items","title":"Menu Items","text":"<ul> <li>REPLAY DATA Use this button to select a sensor log for playback</li> <li>The play/pause button can be used to start/stop the playback</li> <li>The time slider can be used to 'seek' through the data</li> </ul>"}]}